---
import { db } from "@/db";
import { usersTable, sessionsTable } from "@/schema";
import { eq, and, gt } from "drizzle-orm";
import * as bcrypt from "bcrypt";

if (Astro.request.method === "POST") {
  try {
    const { newPassword } = await Astro.request.json();

    if (typeof newPassword !== "string") {
      return new Response(
        JSON.stringify({ message: "Invalid request body." }),
        { status: 400 }
      );
    }

    const sessionToken = Astro.cookies.get("sessionCookie")?.value;
    if (!sessionToken) {
      return new Response(JSON.stringify({ message: "Not logged in." }), {
        status: 401,
      });
    }

    const now = new Date();
    const [session] = await db
      .select()
      .from(sessionsTable)
      .where(
        and(
          eq(sessionsTable.token, sessionToken),
          gt(sessionsTable.expiresAt, now)
        )
      );

    if (!session) {
      return new Response(JSON.stringify({ message: "Session invalid." }), {
        status: 401,
      });
    }

    const [user] = await db
      .select()
      .from(usersTable)
      .where(eq(usersTable.id, session.userId));

    if (!user) {
      return new Response(JSON.stringify({ message: "User not found." }), {
        status: 404,
      });
    }

    // hash new password
    const SALT_ROUNDS = 10;
    const hashedNewPassword = await bcrypt.hash(newPassword, SALT_ROUNDS);

    await db
      .update(usersTable)
      .set({ password: hashedNewPassword })
      .where(eq(usersTable.id, user.id));

    // success
    return new Response(
      JSON.stringify({ message: "Password changed successfully." }),
      { status: 200 }
    );
  } catch (err) {
    console.error("Change password error:", err);
    return new Response(JSON.stringify({ message: "Server error." }), {
      status: 500,
    });
  }
}

return new Response(null, { status: 405 });
---
