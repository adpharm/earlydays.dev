---
import Layout from "../../_layout.astro";
import { SelectUser, sessionsTable, usersTable } from "@/schema";
import { eq, and, gt } from "drizzle-orm";
import { db } from "@/db";
import { AdminNavigation } from "@/components/AdminNavigation";
import { SelectPost, postsTable } from "@/schema";
import ImageUploader from "@/components/ImageUploader";
import { useState } from "react";

const sessionToken = Astro.cookies.get("sessionCookie")?.value;

if (!sessionToken) {
  return new Response(null, {
    status: 302,
    headers: { Location: "/login" },
  });
}

// Current date to ensure session in DB hasn't expired
const now = new Date();
const [session] = await db
  .select()
  .from(sessionsTable)
  .where(
    and(eq(sessionsTable.token, sessionToken), gt(sessionsTable.expiresAt, now))
  );

// If no valid session, redirect
if (!session) {
  return new Response(null, {
    status: 302,
    headers: { Location: "/login" },
  });
}

const { userId } = Astro.params;

let user: SelectUser;
let error: string | null = null;
let loading = true;

try {
  // Convert userId to a number
  const uId = Number(userId);

  if (isNaN(uId)) {
    throw new Error("Invalid post ID.");
  }

  // Fetch the post directly from the database
  const fetchedUsers = await db
    .select()
    .from(usersTable)
    .where(eq(usersTable.id, uId));

  const fetchedUser = fetchedUsers.at(0);

  if (!fetchedUser) {
    throw new Error("Post not found.");
  }

  user = fetchedUser;
} catch (err) {
  error = err instanceof Error ? err.message : "Failed to fetch the user.";
  console.error(err);

  // Redirect if post not found or an error occurs
  return new Response(null, {
    status: 302,
    headers: { Location: "/admin" },
  });
} finally {
  loading = false;
}

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const payload = {
    name: formData.get("name"),
    email: formData.get("email"),
    gitUrl: formData.get("gitUrl"),
    profileSrc: formData.get("profileSrc"),
    userId: user.id,
  };

  const baseUrl = process.env.BASE_URL || "http://localhost:3000";

  console.log(formData, payload, baseUrl);

  try {
    const response = await fetch("localhost:3000/api/updateUser.ts", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });
    if (!response.ok) {
      const err = await response.json();
      throw new Error(err.error || "Request failed");
    }
    console.log("Successfully updated user");
  } catch (error: any) {
    throw new Error("Unable to update user: ", error);
  }

  // Redirect after successful update
  return new Response(null, {
    status: 302,
    headers: { Location: "/admin" },
  });
}
---

<Layout>
  <AdminNavigation client:load />

  <div class="min-h-screen bg-gradient-to-r from-pink-50 to-pink-100">
    <div class="max-w-5xl mx-auto p-4 flex flex-col justify-start items-center">
      <!-- Form Wrapper -->
      <form
        method="POST"
        class="bg-white shadow rounded-md p-6 w-full space-y-6"
      >
        <!-- Hidden input to store the image's src -->
        <input
          type="hidden"
          name="profileSrc"
          id="profileSrc"
          value={user.profileSrc || ""}
        />
        <div class="flex flex-row justify-start items-center">
          <ImageUploader imgSrc={user.profileSrc || ""} client:only="react" />
          <div class="flex flex-col justify-center items-start ml-6">
            <label for="name" class="text-gray-700 font-semibold mb-2"
              >Name</label
            >
            <input
              id="name"
              name="name"
              type="text"
              class="border border-gray-300 rounded-md p-2 text-gray-900"
              value={user.name}
            />
          </div>
        </div>

        <!-- Read Time -->
        <div class="flex flex-col">
          <label for="email" class="text-gray-700 font-semibold mb-2"
            >Email</label
          >
          <div class="flex flex-row items-center space-x-2">
            <input
              id="email"
              name="email"
              type="email"
              class="border border-gray-300 rounded-md p-2 text-gray-900 w-full"
              value={user.email ?? ""}
            />
          </div>
        </div>

        <!-- Labels -->
        <div class="flex flex-col">
          <label for="gitUrl" class="text-gray-700 font-semibold mb-2">
            Github URL
          </label>
          <input
            id="gitUrl"
            name="gitUrl"
            type="text"
            class="border border-gray-300 rounded-md p-2 text-gray-900"
            value={user.gitUrl ?? ""}
          />
        </div>

        <!-- Save Changes Button -->
        <div class="w-full flex items-center justify-center">
          <button
            type="submit"
            class="mt-4 bg-pink-600 hover:bg-pink-700 text-white font-semibold px-6 py-2 rounded-md transition-colors"
          >
            Save Changes
          </button>
        </div>
      </form>
    </div>
  </div>
</Layout>
