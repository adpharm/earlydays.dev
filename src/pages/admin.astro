---
import Layout from "./_layout.astro";
import { db } from "@/db";
import { postsTable, sessionsTable } from "@/schema";
import { usersTable } from "@/schema";
import { eq, and, gt, ne, sql } from "drizzle-orm";
import { AdminNavigation } from "@/components/AdminNavigation";
import { CustomButton } from "@/components/CustomButton";
import { ColumnDef } from "@tanstack/react-table";
import { ReactNode } from "react";
import { DataTable } from "@/components/DataTable";
import { ChangePasswordModal } from "@/components/ChangePasswordModal";
import { EditPostModal } from "@/components/EditPostModal";
import { EditUserModal } from "@/components/EditUserModal";
import { formatShortDate } from "@/lib/utils";

const sessionToken = Astro.cookies.get("sessionCookie")?.value;

if (!sessionToken) {
  return new Response(null, {
    status: 302,
    headers: { Location: "/login" },
  });
}

// current date to make sure session in db hasn't expired
const now = new Date();
const [session] = await db
  .select()
  .from(sessionsTable)
  .where(
    and(eq(sessionsTable.token, sessionToken), gt(sessionsTable.expiresAt, now))
  );

// If no valid session, redirect
if (!session) {
  return new Response(null, {
    status: 302,
    headers: { Location: "/login" },
  });
}

// now we have user for this session
const [user] = await db
  .select()
  .from(usersTable)
  .where(eq(usersTable.id, session.userId));

// This type is used to define the shape of our data.
export type User = {
  name: string;
  email: string;
  githubUrl: string;
  profileSrc: string;
  numberOfPosts: number;
  editUser: string;
};

export type OtherPosts = {
  title: string;
  dateCreated: string;
  dateUpdated: string;
  readTime: number | null;
  labels: string | null;
  createdBy: string;
  post: typeof postsTable.$inferSelect;
};

export const otherPostsColumns: ColumnDef<OtherPosts>[] = [
  {
    accessorKey: "title",
    header: "Title",
  },
  {
    accessorKey: "dateCreated",
    header: "Date Created",
  },
  {
    accessorKey: "dateUpdated",
    header: "Date Updated",
  },
  {
    accessorKey: "readTime",
    header: "Read time",
  },
  {
    accessorKey: "labels",
    header: "Label(s)",
  },
  {
    accessorKey: "createdBy",
    header: "Created By",
  },
  {
    accessorKey: "post",
    header: "Edit Post",
    cell: ({ row }) => <EditPostModal post={row.original.post} />,
  },
];

export const userColumns: ColumnDef<User>[] = [
  {
    accessorKey: "name",
    header: "Name",
  },
  {
    accessorKey: "email",
    header: "Email",
  },
  {
    accessorKey: "githubUrl",
    header: "Github",
  },
  {
    accessorKey: "profileSrc",
    header: "Profile Picture URL",
  },
  {
    accessorKey: "numberOfPosts",
    header: "# of posts",
  },
  {
    accessorKey: "editUser",
    header: "Edit Profile",
  },
];

// data structures:

// OTHER POSTS
const otherPostsRaw = await db
  .select()
  .from(postsTable)
  .where(ne(postsTable.author, user.name));

// Transform into YourPosts shape
const otherPosts = otherPostsRaw.map((p) => ({
  title: p.title.substring(0, 15) + "...",
  dateCreated: formatShortDate(p.createdAt),
  dateUpdated: formatShortDate(p.updatedAt),
  readTime: p.readTime,
  labels: p.tags,
  createdBy: p.author,
  post: p,
}));

// USERS
const usersRaw = await db.select().from(usersTable);

// We'll do a GROUP BY on authorId to get the number of posts per user
const counts = await db
  .select({
    authorName: postsTable.author,
    postCount: sql<number>`COUNT(*)`,
  })
  .from(postsTable)
  .groupBy(postsTable.author);

// Create a quick Map { userId -> postCount }
const userCountsMap = new Map<string, number>();
counts.forEach((c) => {
  userCountsMap.set(c.authorName, c.postCount);
});

// Transform into our "User" shape
const allUsers = usersRaw.map((u) => ({
  name: u.name,
  email: u.email,
  githubUrl: u.gitUrl ?? "",
  profileSrc: u.profileSrc ?? "",
  numberOfPosts: userCountsMap.get(u.name) ?? 0,
  editUser: "Edit User",
}));
---

<Layout>
  <AdminNavigation client:load />
  <div
    class="w-full flex flex-col justify-center items-center text-center bg-blue-background"
  >
    <div
      class="w-full min-h-screen text-black p-4 flex flex-col justify-start items-center max-w-5xl space-y-10"
    >
      <div class="flex flex-col justify-center items-start space-y-2 w-full">
        <h2 class="text-white text-2xl">Your Posts</h2>
        <div
          class="w-full bg-blue-background-secondary border-8 border-yellow-bright rounded-3xl p-10"
        >
        </div>
      </div>

      <div class="flex flex-col justify-center items-start space-y-2 w-full">
        <h2 class="text-white text-2xl">Others Posts</h2>
        <div
          class="w-full bg-blue-background-secondary border-8 border-yellow-bright rounded-3xl p-10"
        >
          <DataTable
            columns={otherPostsColumns}
            data={otherPosts}
            client:load
          />
        </div>
      </div>

      <div class="flex flex-col justify-center items-start space-y-2 w-full">
        <h2 class="text-white text-2xl">Users</h2>
        <div
          class="w-full bg-blue-background-secondary border-8 border-yellow-bright rounded-3xl p-10"
        >
          <DataTable columns={userColumns} data={allUsers} client:load />
        </div>
      </div>

      <div class="flex flex-col justify-center items-start space-y-2 w-full">
        <h2 class="text-white text-2xl">Other actions</h2>
        <div class="w-full grid grid-cols-1 lg:grid-cols-3 gap-4">
          <ChangePasswordModal client:load />
        </div>
      </div>
    </div>
  </div>
</Layout>
