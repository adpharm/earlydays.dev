---
import Layout from "./_layout.astro";
import { db } from "@/db";
import { SelectPost, sessionsTable, SelectUser } from "@/schema";
import { usersTable } from "@/schema";
import { eq, and, gt, ne, sql } from "drizzle-orm";
import { AdminNavigation } from "@/components/AdminNavigation";
import { CustomButton } from "@/components/CustomButton";
import { ColumnDef } from "@tanstack/react-table";
import { ReactNode } from "react";
import { DataTable } from "@/components/DataTable";
import { ChangePasswordModal } from "@/components/ChangePasswordModal";
import { formatShortDate } from "@/lib/utils";
import { PostsTable } from "@/components/PostsTable";
import { UsersTable } from "@/components/UsersTable";

const sessionToken = Astro.cookies.get("sessionCookie")?.value;

if (!sessionToken) {
  return new Response(null, {
    status: 302,
    headers: { Location: "/login" },
  });
}

const now = new Date();
const [session] = await db
  .select()
  .from(sessionsTable)
  .where(
    and(eq(sessionsTable.token, sessionToken), gt(sessionsTable.expiresAt, now))
  );

if (!session) {
  return new Response(null, {
    status: 302,
    headers: { Location: "/login" },
  });
}

const baseUrl = process.env.BASE_URL;
let users;
let posts;

console.log(baseUrl);

try {
  const response = await fetch(baseUrl + "/api/getUsers", {
    method: "GET",
    headers: { "Content-Type": "application/json" },
  });

  if (!response.ok) {
    const err = await response.json();
    console.error("Failed to fetch users:", err);
    throw new Error(err.error || "Unable to get Users");
  }

  const data = await response.json();

  // Ensure the response contains 'users'
  if (!data.users) {
    console.error("Response from /api/getUsers does not contain 'users'.");
    throw new Error("Invalid response structure for users.");
  }

  users = data.users;
} catch (error: any) {
  console.error("Error fetching users:", error.message || error);
  throw new Error(error.message || "Unable to retrieve users.");
}

try {
  const response = await fetch(baseUrl + "/api/getAllPosts", {
    method: "GET",
    headers: { "Content-Type": "application/json" },
  });

  if (!response.ok) {
    const err = await response.json();
    console.error("Failed to fetch posts:", err);
    throw new Error(err.error || "Unable to get posts.");
  }

  const data = await response.json();

  // Ensure the response contains 'posts'
  if (!data.posts) {
    console.error("Response from /api/getAllPosts does not contain 'posts'.");
    throw new Error("Invalid response structure for posts.");
  }

  posts = data.posts;
} catch (error: any) {
  console.error("Error fetching posts:", error.message || error);
  throw new Error(error.message || "Unable to retrieve posts.");
}
let yourPublishedPosts, yourDrafts;
let otherPostsRaw;

if (users && posts) {
  // Ensure session and session.userId are defined
  if (!session || !session.userId) {
    console.error("Session or session.userId is undefined.");
    throw new Error("User session is invalid.");
  }

  const user = users.find((user: SelectUser) => user.id === session.userId);

  if (!user) {
    console.error(`User with ID ${session.userId} not found.`);
    throw new Error("User not found.");
  }

  // get your published posts
  yourPublishedPosts = posts.filter(
    (post: SelectPost) => post.author === user.id && post.isPublished
  );
  // get your drafts
  yourDrafts = posts.filter(
    (post: SelectPost) => post.author === user.id && !post.isPublished
  );
  otherPostsRaw = posts.filter((post: SelectPost) => post.author !== user.id);

  console.log("Other Posts:", otherPostsRaw);
} else {
  console.error("Posts or Users is undefined.");
  throw new Error("Posts or Users is undefined");
}
---

<Layout>
  <AdminNavigation client:load />
  <div
    class="min-h-screen bg-gradient-to-r from-pink-50 to-pink-100 text-gray-800"
  >
    <div class="max-w-6xl mx-auto py-10 px-4 space-y-10">
      <!-- Dashboard Header & New Post Button -->
      <div class="flex items-center justify-between">
        <h1 class="text-3xl font-bold text-pink-700">Admin Dashboard</h1>
        <form action="/api/newPost" method="POST">
          <button
            type="submit"
            class="bg-black rounded-md px-4 py-2 text-white font-bold hover:bg-opacity-75"
            >Create New Post</button
          >
        </form>
      </div>

      <!-- Your Drafts -->
      <div class="space-y-2">
        <h2 class="text-2xl font-semibold text-pink-700">My Drafts</h2>
        <div class="bg-white rounded-md shadow p-2">
          <PostsTable posts={yourDrafts} client:idle />
        </div>
      </div>

      <!-- Your Published Posts -->
      <div class="space-y-2">
        <h2 class="text-2xl font-semibold text-pink-700">My Published Posts</h2>
        <div class="bg-white rounded-md shadow p-2">
          <PostsTable posts={yourPublishedPosts} client:idle />
        </div>
      </div>

      <!-- Other Posts -->
      <div class="space-y-2">
        <h2 class="text-2xl font-semibold text-pink-700">
          Posts From Other Adpharmers
        </h2>
        <div class="bg-white rounded-md shadow p-2">
          <PostsTable posts={otherPostsRaw} showAuthor client:idle />
        </div>
      </div>

      <!-- Users -->
      <div class="space-y-2">
        <h2 class="text-2xl font-semibold text-pink-700">Adpharmers</h2>
        <div class="bg-white rounded-md shadow p-4">
          <UsersTable users={users} client:idle />
        </div>
      </div>

      <!-- Other actions -->
      <div class="space-y-2">
        <h2 class="text-2xl font-semibold text-pink-700">Other actions</h2>
        <div class="bg-white rounded-md shadow p-4">
          <div class="grid grid-cols-1 lg:grid-cols-3 gap-4">
            <ChangePasswordModal client:idle />
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>
